"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[563],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>g});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),p=i,g=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return n?t.createElement(g,o(o({ref:a},u),{},{components:n})):t.createElement(g,o({ref:a},u))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},894:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},o="\ud83d\udcd6Migraciones",s={unversionedId:"BacKend/migraciones",id:"BacKend/migraciones",title:"\ud83d\udcd6Migraciones",description:"\xbfQu\xe9 es una migraci\xf3n?",source:"@site/docs/BacKend/migraciones.md",sourceDirName:"BacKend",slug:"/BacKend/migraciones",permalink:"/api-laravel-doc/docs/BacKend/migraciones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/BacKend/migraciones.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Definici\xf3n de modelos y migraciones",permalink:"/api-laravel-doc/docs/category/definici\xf3n-de-modelos-y-migraciones"},next:{title:"\ud83d\udcd6Creando los modelos",permalink:"/api-laravel-doc/docs/BacKend/modelos"}},l={},c=[{value:"\xbfQu\xe9 es una migraci\xf3n?",id:"qu\xe9-es-una-migraci\xf3n",level:2},{value:"\ud83d\udcc7Modelo ER",id:"modelo-er",level:3},{value:"\ud83d\udcc7Creaci\xf3n de relaciones",id:"creaci\xf3n-de-relaciones",level:3},{value:"\xbfQu\xe9 es una migraci\xf3n?",id:"qu\xe9-es-una-migraci\xf3n-1",level:2},{value:"Generando migraciones en Laravel",id:"generando-migraciones-en-laravel",level:2},{value:"Definiendo las tablas de la BB.DD",id:"definiendo-las-tablas-de-la-bbdd",level:2},{value:"\ud83d\udcc7Tabla categor\xedas",id:"tabla-categor\xedas",level:3},{value:"\ud83d\udcc7Tabla subcategor\xedas",id:"tabla-subcategor\xedas",level:3},{value:"\ud83d\udcc7Tabla ivas",id:"tabla-ivas",level:3},{value:"\ud83d\udcc7Tabla productos",id:"tabla-productos",level:3},{value:"\ud83d\udcc7Tabla ofertas",id:"tabla-ofertas",level:3},{value:"\ud83d\udcc7Tabla proveedores",id:"tabla-proveedores",level:3},{value:"\ud83d\udcc7Tabla producto_proveedor",id:"tabla-producto_proveedor",level:3},{value:"\ud83d\udcc7Tabla provincias",id:"tabla-provincias",level:3},{value:"\ud83d\udcc7Tabla poblaciones",id:"tabla-poblaciones",level:3},{value:"\ud83d\udcc7Modificando la tabla proveedores",id:"modificando-la-tabla-proveedores",level:3},{value:"Creaci\xf3n de vistas",id:"creaci\xf3n-de-vistas",level:2},{value:"\ud83d\udcc7Vista v_productos",id:"vista-v_productos",level:3},{value:"\ud83d\udcc7Vista v_ofertas",id:"vista-v_ofertas",level:3},{value:"\ud83d\udcc7Vista v_proveedor",id:"vista-v_proveedor",level:3},{value:"\xbfC\xf3mo ejecutar las migraciones?",id:"c\xf3mo-ejecutar-las-migraciones",level:2}],u={toc:c},d="wrapper";function m(e){let{components:a,...r}=e;return(0,i.kt)(d,(0,t.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"migraciones"},"\ud83d\udcd6Migraciones"),(0,i.kt)("h2",{id:"qu\xe9-es-una-migraci\xf3n"},"\xbfQu\xe9 es una migraci\xf3n?"),(0,i.kt)("p",null,"En t\xe9rminos simples, una migraci\xf3n en Laravel es un conjunto de instrucciones que permiten a los desarrolladores crear o modificar la estructura de una base de datos en su aplicaci\xf3n web. En lugar de modificar manualmente la base de datos, los desarrolladores pueden crear archivos de migraci\xf3n que describen los cambios que deben hacerse. Estos archivos de migraci\xf3n se ejecutan autom\xe1ticamente utilizando comandos de Artisan, lo que permite a los desarrolladores actualizar la estructura de la base de datos de manera controlada y coherente con la evoluci\xf3n de la aplicaci\xf3n. En resumen, las migraciones son una herramienta \xfatil que permite a los desarrolladores administrar la estructura de la base de datos de manera program\xe1tica y coherente, lo que puede ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos."),(0,i.kt)("p",null,"Uno de los beneficios clave de utilizar migraciones es el control de versiones. Al utilizar archivos de migraci\xf3n, los desarrolladores pueden mantener un registro de los cambios en la estructura de la base de datos a medida que evoluciona la aplicaci\xf3n. Esto es especialmente \xfatil cuando hay varios desarrolladores trabajando en el mismo proyecto o cuando se realiza un seguimiento de diferentes versiones de la aplicaci\xf3n. Cada archivo de migraci\xf3n se puede etiquetar con un n\xfamero de versi\xf3n, lo que ayuda a los desarrolladores a realizar un seguimiento de los cambios y a asegurarse de que todos los miembros del equipo est\xe9n trabajando con la misma versi\xf3n de la base de datos."),(0,i.kt)("p",null,"Otro beneficio importante de las migraciones es que pueden ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos. En lugar de tener que modificar manualmente la base de datos cada vez que se realizan cambios en la estructura de la base de datos, los desarrolladores pueden crear archivos de migraci\xf3n que describen los cambios que deben hacerse. Estos archivos de migraci\xf3n se pueden ejecutar autom\xe1ticamente utilizando comandos de Artisan, lo que ahorra tiempo y reduce la posibilidad de errores humanos."),(0,i.kt)("p",null,'Adem\xe1s, las migraciones en Laravel tambi\xe9n son muy flexibles. Los desarrolladores pueden crear migraciones para agregar nuevas tablas, modificar columnas existentes, agregar restricciones de clave for\xe1nea, crear \xedndices, eliminar tablas y mucho m\xe1s. Cada migraci\xf3n se compone de dos m\xe9todos principales: el m\xe9todo "up" que describe los cambios que deben realizarse en la base de datos y el m\xe9todo "down" que describe c\xf3mo deshacer esos cambios.'),(0,i.kt)("p",null,"En resumen, las migraciones en Laravel son una herramienta esencial para administrar la estructura de la base de datos de manera program\xe1tica y coherente con la evoluci\xf3n de la aplicaci\xf3n. Al utilizar migraciones, los desarrolladores pueden mantener un registro de los cambios de la base de datos, ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos, y tener una gran flexibilidad para realizar cambios en la estructura de la base de datos."),(0,i.kt)("h3",{id:"modelo-er"},"\ud83d\udcc7Modelo ER"),(0,i.kt)("p",null,"Este es el modelo entidad/relaci\xf3n de nuestra BB.DD."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Mi imagen",src:n(5666).Z,width:"1381",height:"1169"})),(0,i.kt)("h3",{id:"creaci\xf3n-de-relaciones"},"\ud83d\udcc7Creaci\xf3n de relaciones"),(0,i.kt)("p",null,"En Laravel, puedes crear relaciones entre tablas usando migraciones. Aqu\xed hay un ejemplo de c\xf3digo que muestra c\xf3mo crear una relaci\xf3n de uno a muchos:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreatePostsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('posts', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('title');\n            $table->text('body');\n            $table->unsignedInteger('user_id');\n            $table->timestambash();\n            \n            $table->foreign('user_id')\n                  ->references('id')->on('users')\n                  ->onDelete('cascade');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('posts');\n    }\n}\n?>\n")),(0,i.kt)("admonition",{title:"Explicaci\xf3n",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"En este ejemplo, se est\xe1 creando una tabla posts con una columna user_id que hace referencia a la columna id en la tabla users. La opci\xf3n onDelete('cascade') indica que si un usuario es eliminado, sus publicaciones tambi\xe9n deben ser eliminadas."),(0,i.kt)("p",{parentName:"admonition"},"Luego de crear la migraci\xf3n, debes ejecutar el comando php artisan migrate para aplicar los cambios en la base de datos. Para m\xe1s informaci\xf3n consulte ",(0,i.kt)("a",{parentName:"p",href:"httbash://laravel.com/docs/9.x/readme"},"la documentaci\xf3 oficial"))),(0,i.kt)("h2",{id:"qu\xe9-es-una-migraci\xf3n-1"},"\xbfQu\xe9 es una migraci\xf3n?"),(0,i.kt)("p",null,"Una ",(0,i.kt)("strong",{parentName:"p"},"migraci\xf3n")," en Laravel es un archivo de PHP que describe una operaci\xf3n de base de datos, como la creaci\xf3n de una tabla o la modificaci\xf3n de una columna existente. Las migraciones permiten que los desarrolladores gestionen los cambios en la estructura de la base de datos de manera sencilla y segura, ya que todos los cambios se realizan a trav\xe9s de archivos que se pueden controlar con un sistema de control de versiones como Git."),(0,i.kt)("p",null,"Cuando se ejecutan las migraciones, Laravel las aplica autom\xe1ticamente a la base de datos mediante una serie de comandos SQL. Esto garantiza que la estructura de la base de datos sea la misma en todas las instancias del proyecto, ya sea en un entorno de desarrollo local, en un servidor de pruebas o en producci\xf3n."),(0,i.kt)("p",null,"Adem\xe1s, las migraciones tambi\xe9n proporcionan un mecanismo para revertir los cambios en la base de datos, lo que es \xfatil en caso de que se deban hacer cambios en la estructura de la base de datos y luego se deba revertir a una versi\xf3n anterior."),(0,i.kt)("p",null,"En resumen, las migraciones en Laravel son una herramienta esencial para el desarrollo de aplicaciones que requieren una gesti\xf3n de base de datos robusta y f\xe1cil de usar."),(0,i.kt)("admonition",{title:"Para saber m\xe1s",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Para m\xe1s informaci\xf3n consulte ",(0,i.kt)("a",{parentName:"p",href:"httbash://laravel.com/docs/9.x/migrations#generating-migrations"},"la documentaci\xf3n oficial de Laravel."))),(0,i.kt)("h2",{id:"generando-migraciones-en-laravel"},"Generando migraciones en Laravel"),(0,i.kt)("p",null,"Tecle el siguiente comando para crear la migraci\xf3n de la tabla categor\xedas."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:migration create_categorias_table\n")),(0,i.kt)("p",null,"Para generar una migraci\xf3n en Laravel 9, puedes usar el comando Artisan make:migration:"),(0,i.kt)("p",null,"Abre la terminal en la ra\xedz de tu proyecto Laravel\nEjecuta el siguiente comando: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Como generar una migraci\xf3n"',title:'"Como',generar:!0,una:!0,'migraci\xf3n"':!0},"php artisan make:migration NombreDeLaMigracion --create=nombre_de_la_tabla\n")),(0,i.kt)("p",null,"Donde NombreDeLaMigracion es el nombre que le quieres dar a la migraci\xf3n y nombre_de_la_tabla es el nombre de la tabla que se crear\xe1 en la base de datos."),(0,i.kt)("p",null,"Esto crear\xe1 un archivo de migraci\xf3n en la carpeta database/migrations con un nombre similar a yyyy_mm_dd_hhmmss_NombreDeLaMigracion.php."),(0,i.kt)("p",null,"Luego, puedes editar ese archivo para definir las columnas que deseas agregar a la tabla. Finalmente, ejecuta el comando php artisan migrate para aplicar las migraciones a la base de datos."),(0,i.kt)("h2",{id:"definiendo-las-tablas-de-la-bbdd"},"Definiendo las tablas de la BB.DD"),(0,i.kt)("h3",{id:"tabla-categor\xedas"},"\ud83d\udcc7Tabla categor\xedas"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categor\xedas"',title:'"Migraci\xf3n',de:!0,'categor\xedas"':!0},"php artisan make:migration create_categorias_table\n")),(0,i.kt)("p",null,"Si todo a marchado bien, deberia haberse creado un fichero PHP dentro de la carpeta database/migrations."),(0,i.kt)("admonition",{title:"Importante",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Siga la convenci\xf3n en sus creaciones de tabla  utilizando ",(0,i.kt)("strong",{parentName:"p"},"create_nombre_de_tabla_table"),", si quiere evitarse problemas en el futuro.")),(0,i.kt)("p",null,"Dir\xedjase al directorio database/migrations y edite al fichero con la migraci\xf3n."),(0,i.kt)("p",null,"Copie el siguiente c\xf3digo y sustituya el c\xf3digo del fichero."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Validation\\Rules\\Unique;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'categorias\', function (Blueprint $table) {\n            $table->id();\n            $table->string("nombre",150)->Unique();\n            $table->text("descripcion");\n            $table->text("imagen")->nullable();\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'categorias\');\n    }\n};\n')),(0,i.kt)("admonition",{title:"tipos de datos m\xe1s comunes en Laravel",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"En Laravel, los tipos de datos en las migraciones se refieren a las especificaciones de los tipos de columnas en las tablas de la base de datos. Algunos de los tipos de datos m\xe1s comunes incluyen:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"bigIncrements: Incremento autom\xe1tico de ID grande"),(0,i.kt)("li",{parentName:"ul"},"bigInteger: Entero grande"),(0,i.kt)("li",{parentName:"ul"},"binary: Datos binarios"),(0,i.kt)("li",{parentName:"ul"},"boolean: Valor booleano"),(0,i.kt)("li",{parentName:"ul"},"char: Cadena fija de longitud"),(0,i.kt)("li",{parentName:"ul"},"date: Fecha"),(0,i.kt)("li",{parentName:"ul"},"dateTime: Fecha y hora"),(0,i.kt)("li",{parentName:"ul"},"decimal: N\xfamero decimal con precisi\xf3n y escala espec\xedficas"),(0,i.kt)("li",{parentName:"ul"},"double: N\xfamero de punto flotante de doble precisi\xf3n"),(0,i.kt)("li",{parentName:"ul"},"enum: Valor de una lista predefinida"),(0,i.kt)("li",{parentName:"ul"},"float: N\xfamero de punto flotante"),(0,i.kt)("li",{parentName:"ul"},"increments: Incremento autom\xe1tico de ID"),(0,i.kt)("li",{parentName:"ul"},"integer: Entero"),(0,i.kt)("li",{parentName:"ul"},"json: Datos en formato JSON"),(0,i.kt)("li",{parentName:"ul"},"longText: Texto largo"),(0,i.kt)("li",{parentName:"ul"},"mediumText: Texto de tama\xf1o medio"),(0,i.kt)("li",{parentName:"ul"},"smallInteger: Entero peque\xf1o"),(0,i.kt)("li",{parentName:"ul"},"string: Cadena"),(0,i.kt)("li",{parentName:"ul"},"text: Texto"),(0,i.kt)("li",{parentName:"ul"},"time: Tiempo"),(0,i.kt)("li",{parentName:"ul"},"timestamp: Marca de tiempo"),(0,i.kt)("li",{parentName:"ul"},"unsignedBigInteger: Entero grande sin signo"),(0,i.kt)("li",{parentName:"ul"},"unsignedInteger: Entero sin signo.")),(0,i.kt)("p",{parentName:"admonition"},"Estos son algunos de los tipos de datos m\xe1s comunes que puedes usar en tus migraciones en Laravel.")),(0,i.kt)("p",null,"El c\xf3digo crea una clase an\xf3nima que extiende la clase Migration de Illuminate y define dos m\xe9todos: up() y down()."),(0,i.kt)("p",null,'El m\xe9todo up() es invocado cuando se ejecuta el comando php artisan migrate y se utiliza para crear la tabla "categor\xedas" en la base de datos con las siguientes columnas:'),(0,i.kt)("p",null,'id: una columna con clave primaria que se genera autom\xe1ticamente como una secuencia incremental.\nnombre: una columna de tipo cadena con un tama\xf1o m\xe1ximo de 150 caracteres que es \xfanica.\ndescripcion: una columna de tipo texto.\nimagen: una columna de tipo texto que puede ser nula.\ncreated_at y updated_at: dos columnas de tipo fecha y hora que se generan autom\xe1ticamente y se actualizan autom\xe1ticamente al insertar o actualizar un registro.\nEl m\xe9todo down() es invocado cuando se ejecuta el comando php artisan migrate:rollback y se utiliza para eliminar la tabla "categor\xedas".'),(0,i.kt)("h3",{id:"tabla-subcategor\xedas"},"\ud83d\udcc7Tabla subcategor\xedas"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categor\xedas"',title:'"Migraci\xf3n',de:!0,'categor\xedas"':!0},"php artisan make:migration create_categorias_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguiente c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'subcategorias\', function (Blueprint $table) {\n            $table->id();\n            $table->string("nombre",150)->unique();\n            $table->text("descripcion");\n            $table->text("imagen")->nullable();\n            $table->unsignedBigInteger("categoria_id");\n            $table->foreign("categoria_id")->references("id")->on("categorias");\n            $table->timestambash();\n            \n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'subcategorias\');\n    }\n};\n')),(0,i.kt)("p",null,"Este c\xf3digo define una migraci\xf3n en Laravel. Una migraci\xf3n es un archivo que contiene instrucciones para crear, modificar o eliminar tablas en la base de datos."),(0,i.kt)("p",null,"El c\xf3digo crea una clase an\xf3nima que extiende la clase Migration de Illuminate y define dos m\xe9todos: up() y down()."),(0,i.kt)("p",null,"El ",(0,i.kt)("strong",{parentName:"p"},"m\xe9todo up()"),' es invocado cuando se ejecuta el comando php artisan migrate y se utiliza para crear la tabla "subcategorias" en la base de datos con las siguientes columnas:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id"),": una columna con clave primaria que se genera autom\xe1ticamente como una secuencia incremental."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"nombre:")," una columna de tipo cadena con un tama\xf1o m\xe1ximo de 150 caracteres que es \xfanica."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"descripcion:")," una columna de tipo texto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"imagen:")," una columna de tipo texto que puede ser nula."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"categoria_id:")," una columna sin signo que representa un identificador de categor\xeda.")),(0,i.kt)("p",null,"La columna categoria_id est\xe1 definida como una clave for\xe1nea que se refiere a la columna id de la tabla categorias."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"created_at y updated_at:")," dos columnas de tipo fecha y hora que se generan autom\xe1ticamente y se actualizan autom\xe1ticamente al insertar o actualizar un registro.\nEl ",(0,i.kt)("strong",{parentName:"li"},"m\xe9todo down()"),' es invocado cuando se ejecuta el comando php artisan migrate:rollback y se utiliza para eliminar la tabla "subcategorias".')),(0,i.kt)("h3",{id:"tabla-ivas"},"\ud83d\udcc7Tabla ivas"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categorias"',title:'"Migraci\xf3n',de:!0,'categorias"':!0},"php artisan make:migration create_ivas_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('ivas', function (Blueprint $table) {\n            $table->id();\n            $table->float(\"tanto_porciento\",4,2);\n            $table->string(\"nombre\",50);\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('ivas');\n    }\n};\n")),(0,i.kt)("h3",{id:"tabla-productos"},"\ud83d\udcc7Tabla productos"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categorias"',title:'"Migraci\xf3n',de:!0,'categorias"':!0},"php artisan make:migration create_productos_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'productos\', function (Blueprint $table) {\n            $table->id();\n            $table->string("nombre")->unique();\n            $table->text("descripcion");\n            $table->float("precio");\n            $table->text("imagen")->nullable();\n            $table->unsignedBigInteger("subcategoria_id");\n            $table->foreign("subcategoria_id"\n            )->references("id")->on("subcategorias");\n            $table->unsignedBigInteger("iva_id");\n            $table->foreign("iva_id")->references("id")->on("ivas");\n            $table->unsignedBigInteger("marca_id");\n            $table->foreign("marca_id")->references("id")->on("marcas");\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'productos\');\n    }\n};\n\n\n')),(0,i.kt)("h3",{id:"tabla-ofertas"},"\ud83d\udcc7Tabla ofertas"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de ofertas"',title:'"Migraci\xf3n',de:!0,'ofertas"':!0},"php artisan make:migration create_ofertas_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'ofertas\', function (Blueprint $table) {\n            $table->id();\n            $table->float("precio");\n            $table->string("descripcion");\n            $table->date("fecha_ini");\n            $table->date("fecha_fin");\n            $table->unsignedBigInteger("producto_id");\n            $table->foreign("producto_id")->references("id")->on("productos");\n\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'ofertas\');\n    }\n};\n\n')),(0,i.kt)("h3",{id:"tabla-proveedores"},"\ud83d\udcc7Tabla proveedores"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de proveedores"',title:'"Migraci\xf3n',de:!0,'proveedores"':!0},"php artisan make:migration create_proveedores_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'proveedores\', function (Blueprint $table) {\n            $table->id();\n            $table->string("nif",9);\n            $table->string("nombre");\n            $table->string("cod_provincia",2);\n            $table->string("cod_postal",5);\n            $table->string("calle");\n            $table->integer("numero");\n            $table->text("notas")->nullable();\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'proveedores\');\n\n    }\n};\n')),(0,i.kt)("h3",{id:"tabla-producto_proveedor"},"\ud83d\udcc7Tabla producto_proveedor"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de producto_proveerdor"',title:'"Migraci\xf3n',de:!0,'producto_proveerdor"':!0},"php artisan make:migration create_producto_proveedor_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("admonition",{title:"informaci\xf3n",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Esta tabla se utiliza para crear una relaci\xf3n mucho a muchos entre productos y proveedores.")),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'producto_proveedor\', function (Blueprint $table) {\n            $table->id();\n            $table->unsignedBigInteger("producto_id");\n            $table->unsignedBigInteger("proveedor_id");\n            $table->foreign("producto_id")->references("id")->on("productos");\n            $table->foreign("proveedor_id")->references("id")->on("proveedores");\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'producto_proveedor\');\n    }\n};\n')),(0,i.kt)("p",null,'La migraci\xf3n crea una tabla llamada "producto_proveedor" en la base de datos que tendr\xe1 los siguientes campos:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id:")," campo de identificaci\xf3n (clave primaria) que se generar\xe1 autom\xe1ticamente"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"producto_id:")," campo que almacena la identificaci\xf3n de un producto"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"proveedor_id:")," campo que almacena la identificaci\xf3n de un proveedor"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"timestambash:")," dos campos de tiempo que registran la fecha y hora de creaci\xf3n y actualizaci\xf3n de cada registro en la tabla.")),(0,i.kt)("p",null,'Adem\xe1s, establece relaciones entre la tabla "producto_proveedor" y las tablas "productos" y "proveedores" mediante claves for\xe1neas. La funci\xf3n "up" se utiliza para aplicar la migraci\xf3n y crear la tabla, mientras que la funci\xf3n "down" se utiliza para revertir la migraci\xf3n y eliminar la tabla.'),(0,i.kt)("h3",{id:"tabla-provincias"},"\ud83d\udcc7Tabla provincias"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de provincias"',title:'"Migraci\xf3n',de:!0,'provincias"':!0},"php artisan make:migration create_provincias_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('provincias', function (Blueprint $table) {\n            $table->id();\n            $table->string(\"codigo\",2)->unique();\n            $table->string(\"nombre\");\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('provincias');\n    }\n};\n\n")),(0,i.kt)("p",null,"La migraci\xf3n crea una tabla llamada provincias donde se guaradaran todas las provincias de Espa\xf1a."),(0,i.kt)("h3",{id:"tabla-poblaciones"},"\ud83d\udcc7Tabla poblaciones"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de poblaciones"',title:'"Migraci\xf3n',de:!0,'poblaciones"':!0},"php artisan make:migration create_poblaciones_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'poblaciones\', function (Blueprint $table) {\n            $table->id();\n            $table->string("codigo",5)->unique();\n            $table->string("nombre");\n            $table->string("provincia_cod",2);\n            $table->foreign("provincia_cod")->references("codigo")->on("provincias");\n            $table->timestambash();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'poblaciones\');\n    }\n};\n\n')),(0,i.kt)("p",null,"La migraci\xf3n crea una tabla llamada poblaciones donde se guaradaran todas las provincias de Espa\xf1a."),(0,i.kt)("h3",{id:"modificando-la-tabla-proveedores"},"\ud83d\udcc7Modificando la tabla proveedores"),(0,i.kt)("p",null,"En la siguiente migraci\xf3n modificaremos la tabla proveedores."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Modficaci\xf3n de la tabla proveedores"',title:'"Modficaci\xf3n',de:!0,la:!0,tabla:!0,'proveedores"':!0},"php artisan make:migration add_foreign_key_proveedores_table\n")),(0,i.kt)("p",null,"Sustituya el c\xf3digo generador por el siguiente c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n    \n        DB::statement(\"CREATE OR REPLACE\n        VIEW `v_productos` AS\n        SELECT \n            `p`.`id` AS `id`,\n            `p`.`nombre` AS `nombre`,\n            `p`.`descripcion` AS `descripcion`,\n            `p`.`iva_id` AS `iva_id`,\n            `s`.`nombre` AS `subcategoria`,\n            `c`.`nombre` AS `categoria`,\n            `m`.`nombre` AS `marca`,\n            `p`.`imagen` AS `imagen`\n        FROM\n            (((`productos` `p`\n            LEFT JOIN `subcategorias` `s` ON ((`p`.`subcategoria_id` = `s`.`id`)))\n            JOIN `categorias` `c` ON ((`c`.`id` = `s`.`categoria_id`)))\n            JOIN `marcas` `m` ON ((`m`.`id` = `p`.`marca_id`))) ORDER BY CATEGORIA,SUBCATEGORIA;\");\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        DB::statement('DROP VIEW v_productos;');\n    }\n};\n\n")),(0,i.kt)("p",null,' La migraci\xf3n modifica la tabla "proveedores" agreg\xe1ndole una relaci\xf3n con la tabla "poblaciones" mediante una clave for\xe1nea. La columna "cod_postal" de la tabla "proveedores" se vincula con la columna "codigo" de la tabla "poblaciones". '),(0,i.kt)("h2",{id:"creaci\xf3n-de-vistas"},"Creaci\xf3n de vistas"),(0,i.kt)("h3",{id:"vista-v_productos"},"\ud83d\udcc7Vista v_productos"),(0,i.kt)("p",null,"Ejecute la siguiente orde en su consola o terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Creaci\xf3n vista v_productos"',title:'"Creaci\xf3n',vista:!0,'v_productos"':!0},"php artisan make:migration create_view_productos\n")),(0,i.kt)("admonition",{title:"Explicaci\xf3n de la vista",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'La migraci\xf3n crea una vista llamada "v_productos" en la base de datos. La vista es una selecci\xf3n de informaci\xf3n de varias tablas (productos, subcategorias, categorias y marcas) con una combinaci\xf3n de JOINs y proyecciones de columnas. La funci\xf3n "up" se utiliza para crear la vista, mientras que la funci\xf3n "down" se utiliza para eliminar la vista en caso de que sea necesario revertir la migraci\xf3n. La cl\xe1usula "ORDER BY" ordena los resultados de la vista por categor\xeda y subcategor\xeda.')),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguiente c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n    \n        DB::statement(\"CREATE OR REPLACE\n        VIEW `v_productos` AS\n        SELECT \n            `p`.`id` AS `id`,\n            `p`.`nombre` AS `nombre`,\n            `p`.`descripcion` AS `descripcion`,\n            `p`.`iva_id` AS `iva_id`,\n            `s`.`nombre` AS `subcategoria`,\n            `c`.`nombre` AS `categoria`,\n            `m`.`nombre` AS `marca`,\n            `p`.`imagen` AS `imagen`\n        FROM\n            (((`productos` `p`\n            LEFT JOIN `subcategorias` `s` ON ((`p`.`subcategoria_id` = `s`.`id`)))\n            JOIN `categorias` `c` ON ((`c`.`id` = `s`.`categoria_id`)))\n            JOIN `marcas` `m` ON ((`m`.`id` = `p`.`marca_id`))) ORDER BY CATEGORIA,SUBCATEGORIA;\");\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        DB::statement('DROP VIEW v_productos;');\n    }\n};\n")),(0,i.kt)("h3",{id:"vista-v_ofertas"},"\ud83d\udcc7Vista v_ofertas"),(0,i.kt)("p",null,"Ejecute el siguiente comando en su terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Creaci\xf3n vista v_ofertas"',title:'"Creaci\xf3n',vista:!0,'v_ofertas"':!0},"php artisan make:migration create_view_ofertas\n")),(0,i.kt)("admonition",{title:"Explicaci\xf3n de la vista",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'Este c\xf3digo define una migraci\xf3n en PHP para la creaci\xf3n y eliminaci\xf3n de una vista en una base de datos relacional. La vista se llama "v_ofertas" y se crea a partir de una uni\xf3n de los datos de las tablas "v_productos" y "ofertas". La vista incluir\xe1 las siguientes columnas: "id", "nombre", "descripci\xf3n", "iva_id", "subcategor\xeda", "categor\xeda", "marca", "imAGEN", "descripci\xf3n_oferta" y "id_oferta". La funci\xf3n "down" se utiliza para eliminar la vista.')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n    \n        DB::statement("CREATE OR REPLACE\n        ALGORITHM = UNDEFINED \n        DEFINER = `admin`@`localhost` \n        SQL SECURITY DEFINER\n    VIEW `v_ofertas` AS\n        SELECT \n            `v`.`id` AS `id`,\n            `v`.`nombre` AS `nombre`,\n            `v`.`descripcion` AS `descripcion`,\n            `v`.`iva_id` AS `iva_id`,\n            `v`.`subcategoria` AS `subcategoria`,\n            `v`.`categoria` AS `categoria`,\n            `v`.`marca` AS `marca`,\n            `v`.`imAGEN` AS `imAGEN`,\n            `o`.`descripcion` AS `descripcio_oferta`,\n            `o`.`id` AS `id_oferta`\n        FROM\n            (`v_productos` `v`\n            JOIN `ofertas` `o` ON ((`v`.`id` = `o`.`producto_id`)));");\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        DB::statement("DROP VIEW v_ofertas");\n    }\n};\n')),(0,i.kt)("h3",{id:"vista-v_proveedor"},"\ud83d\udcc7Vista v_proveedor"),(0,i.kt)("p",null,"Ejecute el siguiente comando desde su terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bach"},"php artisan \n\n```js\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        \n        DB::statement(\"CREATE OR REPLACE v_proveedores AS SELECT pr.*,pob.nombre as poblacion,pro.nombre as provincia \n        FROM comercio.proveedores pr INNER JOIN poblaciones pob ON pr.cod_postal=pob.codigo\n        INNER JOIN provincias pro ON pro.codigo=pob.provincia_cod;\");\n    }\n    \n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('v_proveedores');\n    }\n};\n?>\n")),(0,i.kt)("p",null,"Este c\xf3digo crea una migraci\xf3n de Laravel para crear una vista llamada ",(0,i.kt)("strong",{parentName:"p"},'"v_proveedores"'),". La vista se basa en una consulta SQL que une tres tablas: ",(0,i.kt)("strong",{parentName:"p"},'"proveedores", "poblaciones" y "provincias"'),". La vista mostrar\xe1 informaci\xf3n de los proveedores con los nombres de la poblaci\xf3n y la provincia correspondiente."),(0,i.kt)("p",null,'El m\xe9todo "up" se ejecuta cuando se ejecuta el comando ',(0,i.kt)("strong",{parentName:"p"},'"php artisan migrate"'),' para aplicar la migraci\xf3n y crear la vista. El m\xe9todo "down" se ejecuta cuando se ejecuta el comando ',(0,i.kt)("strong",{parentName:"p"},'"php artisan migrate:rollback"')," para revertir la migraci\xf3n y eliminar la vista."),(0,i.kt)("h2",{id:"c\xf3mo-ejecutar-las-migraciones"},"\xbfC\xf3mo ejecutar las migraciones?"),(0,i.kt)("p",null,"Desde la terminal ejecutar el siguiente comando:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Creaci\xf3n vista v_ofertas"',title:'"Creaci\xf3n',vista:!0,'v_ofertas"':!0},"php artisan make:migration create_view_proveedor\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan migrate\n")),(0,i.kt)("admonition",{title:"Opciones del comando",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"php artisan migrate es un comando que se utiliza en Laravel para realizar migraciones en la base de datos. Con este comando, Laravel crea o modifica las tablas en la base de datos seg\xfan las definiciones especificadas en las migraciones."),(0,i.kt)("p",{parentName:"admonition"},"Adem\xe1s, tambi\xe9n existen otros comandos relacionados con migraciones en Laravel:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"php artisan migrate:install:")," Este comando crea la tabla de migraciones en la base de datos.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"php artisan migrate:rollback:")," Este comando revierte la \xfaltima migraci\xf3n realizada.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"php artisan migrate:status:")," Este comando muestra el estado de las migraciones, es decir, si est\xe1n pendientes, realizadas o revertidas.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"php artisan migrate:refresh:")," Este comando revierte todas las migraciones y las vuelve a ejecutar.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"php artisan migrate:fresh:")," Este  comando borra todas las tablas de la base de datos y crea todas las tablas y vuelve a ejecutar el m\xe9todo up. Se utiliza en sustituci\xf3n de ",(0,i.kt)("strong",{parentName:"p"},"refresh")," cuando alguna tabla no ha podido borrarse.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"php artisan migrate:reset:")," Este comando revierte todas las migraciones."))),(0,i.kt)("p",{parentName:"admonition"},"Estos son algunos de los comandos m\xe1s comunes que se utilizan con el fin de gestionar las migraciones en Laravel.")))}m.isMDXComponent=!0},5666:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/modelo-af8d1a7b044b0d24dd868c8914330b06.png"}}]);