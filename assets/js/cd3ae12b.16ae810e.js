"use strict";(self.webpackChunkapi_laravel_doc=self.webpackChunkapi_laravel_doc||[]).push([[516],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>g});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=r.createContext({}),u=function(e){var a=r.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},p=function(e){var a=u(e.components);return r.createElement(i.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=t,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(g,l(l({ref:a},p),{},{components:n})):r.createElement(g,l({ref:a},p))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[d]="string"==typeof e?e:t,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6917:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),t=(n(7294),n(3905));const o={sidebar_position:6},l="\ud83d\udcd6Controladores",s={unversionedId:"controladores/controladores",id:"controladores/controladores",title:"\ud83d\udcd6Controladores",description:"\xbfQu\xe9 es un controlador?",source:"@site/docs/controladores/controladores.md",sourceDirName:"controladores",slug:"/controladores/",permalink:"/api-laravel-doc/docs/controladores/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/controladores/controladores.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd6Conceptos b\xe1sicos",permalink:"/api-laravel-doc/docs/controladores/conceptos"},next:{title:"\ud83d\udcd6Rutas",permalink:"/api-laravel-doc/docs/controladores/rutas"}},i={},u=[{value:"\xbfQu\xe9 es un controlador?",id:"qu\xe9-es-un-controlador",level:2},{value:"Creaci\xf3n de un controladores REST",id:"creaci\xf3n-de-un-controladores-rest",level:2},{value:"\ud83d\udcc7CategoriaController",id:"categoriacontroller",level:3},{value:"\ud83d\udcc7IvaController",id:"ivacontroller",level:3},{value:"\ud83d\udcc7MarcaController",id:"marcacontroller",level:3},{value:"\ud83d\udcc7OfertaController",id:"ofertacontroller",level:3},{value:"\ud83d\udcc7PoblacionController",id:"poblacioncontroller",level:3},{value:"\ud83d\udcc7ProductoController",id:"productocontroller",level:3},{value:"\ud83d\udcc7ProductoController",id:"productocontroller-1",level:3}],p={toc:u},d="wrapper";function c(e){let{components:a,...n}=e;return(0,t.kt)(d,(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"controladores"},"\ud83d\udcd6Controladores"),(0,t.kt)("h2",{id:"qu\xe9-es-un-controlador"},"\xbfQu\xe9 es un controlador?"),(0,t.kt)("p",null,"Un ",(0,t.kt)("strong",{parentName:"p"},"controlador")," en Laravel es una clase PHP que se encarga de manejar las solicitudes HTTP y proporcionar una respuesta apropiada. Los controladores se utilizan para agrupar el l\xf3gica de negocios y proporcionar un punto de acceso central para el manejo de solicitudes ",(0,t.kt)("strong",{parentName:"p"},"HTTP"),"."),(0,t.kt)("p",null,"Un controlador puede contener varios m\xe9todos, cada uno de los cuales se ejecutar\xe1 en respuesta a una solicitud HTTP espec\xedfica. Por ejemplo, puedes tener un controlador que maneje las solicitudes para ver, crear, actualizar y eliminar registros de una tabla de la base de datos."),(0,t.kt)("p",null,"Para crear un controlador en Laravel, debes usar el comando php artisan make:controller seguido del nombre del controlador. Por ejemplo, para crear un controlador llamado ",(0,t.kt)("strong",{parentName:"p"},"ProductosController"),", ejecutar\xedas el siguiente comando:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller ProductosController\n")),(0,t.kt)("p",null,"Una vez creado el controlador, puedes agregar m\xe9todos para manejar diferentes solicitudes HTTP. Por ejemplo, puedes tener un m\xe9todo index que muestre una lista de productos y un m\xe9todo store que almacene un nuevo producto en la base de datos."),(0,t.kt)("p",null,"Para hacer una solicitud HTTP a un controlador, debes definir una ruta en el archivo routes/web.php que apunte a un m\xe9todo espec\xedfico en el controlador. Por ejemplo, para hacer una solicitud GET a /productos y ejecutar el m\xe9todo index en el controlador ProductosController, podr\xedas agregar la siguiente ruta:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"Route::get('/productos', 'ProductosController@index');\n")),(0,t.kt)("p",null,"El controlador es una parte importante de la arquitectura de Laravel y se utiliza para separar la l\xf3gica de negocios de la l\xf3gica de presentaci\xf3n, lo que ayuda a mantener tu aplicaci\xf3n limpia y organizada."),(0,t.kt)("h2",{id:"creaci\xf3n-de-un-controladores-rest"},"Creaci\xf3n de un controladores REST"),(0,t.kt)("h3",{id:"categoriacontroller"},"\ud83d\udcc7CategoriaController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/CategoriaController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo CategoriaController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Categoria;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n")),(0,t.kt)("p",null,"Este c\xf3digo a\xf1ade dos ",(0,t.kt)("strong",{parentName:"p"},"namespaces")," al controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"App\\Models\\Categoria, con esta instrucci\xf3n podremos crear nuestros objetos Categoria y utilizar las instrucciones precisas para realizar un CRUD con Eloquent."),(0,t.kt)("li",{parentName:"ol"},"Illuminate\\Support\\Facades\\Validator, la clase ",(0,t.kt)("strong",{parentName:"li"},"Validator")," nos permitir\xe1 validar los datos de entrada, como que no vengan vac\xedos y tengan una determinada longitud.")),(0,t.kt)("p",null,"Continuaremos creando la funci\xf3n Index:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"    public function index()\n    {\n        //\n        return Categoria::all();\n\n    }\n")),(0,t.kt)("p",null,"Esta funci\xf3n devuelve toda la lista de categor\xedas de la BB.DD en formato JSON."),(0,t.kt)("p",null,"Seguidamente cree esta nueva funci\xf3n:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|unique:categorias|max:150',\n            'descripcion' => 'required',\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        $categoria=Categoria::create($request->all());\n        return $categoria;\n    }\n")),(0,t.kt)("p",null,"Este c\xf3digo es un m\xe9todo en un controlador de Laravel que se encarga de almacenar un nuevo recurso en el almacenamiento. El m\xe9todo toma un objeto ",(0,t.kt)("strong",{parentName:"p"},"Request")," como par\xe1metro, que representa una solicitud HTTP entrante."),(0,t.kt)("p",null,"El primer paso en el m\xe9todo es validar los datos entrantes. Esto se hace utilizando el facade ",(0,t.kt)("strong",{parentName:"p"},"Validator")," proporcionado por Laravel. El Validator se instancia con el m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"make")," y los datos a ser validados (todos los datos en el objeto de solicitud). Las reglas de validaci\xf3n se especifican como un arreglo, con las claves siendo los nombres de los campos y los valores siendo las reglas de validaci\xf3n para ese campo. En este caso, el campo ",(0,t.kt)("strong",{parentName:"p"},"'nombre'")," es obligatorio, debe ser \xfanico en la tabla ",(0,t.kt)("strong",{parentName:"p"},"'categorias'")," y debe tener una longitud m\xe1xima de 150 caracteres. El campo ",(0,t.kt)("strong",{parentName:"p"},"'descripci\xf3n'")," tambi\xe9n es obligatorio."),(0,t.kt)("p",null,"Si la validaci\xf3n falla, el m\xe9todo devuelve una respuesta JSON que contiene los errores de validaci\xf3n y un c\xf3digo de estado ",(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"HTTP de 422 (Entidad no procesable)")),"."),(0,t.kt)("p",null,"Si la validaci\xf3n es exitosa, se crea un nuevo objeto Categoria usando el m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"create")," y los datos del objeto de solicitud. A continuaci\xf3n, se devuelve el nuevo objeto Categoria creado."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Categoria  $categoria\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n        \n        $categoria= Categoria::findOrFail($id);\n        return $categoria;\n    }\n")),(0,t.kt)("p",null,"Este c\xf3digo es un m\xe9todo en un controlador de Laravel que se encarga de mostrar un recurso espec\xedfico. El m\xe9todo toma un par\xe1metro $id, que representa el identificador del recurso a mostrar."),(0,t.kt)("p",null,"En el m\xe9todo, se usa el m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"findOrFail")," en la clase Categoria para encontrar el recurso con el identificador especificado. Si el recurso no se puede encontrar, el m\xe9todo findOrFail lanzar\xe1 una excepci\xf3n ModelNotFoundException, que ser\xe1 manejada por Laravel y devolver\xe1 una respuesta ",(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"HTTP 404 (No encontrado)")),"."),(0,t.kt)("p",null,"Si el recurso se encuentra, se asigna a la variable $categoria y se devuelve. Esto permitir\xe1 que la informaci\xf3n de la categor\xeda se muestre en la respuesta HTTP."),(0,t.kt)("p",null,"Ahora teclee el siguiente m\xe9todo"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Categoria  $categoria\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|unique:categorias|max:150',\n            'descripcion' => 'required',\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n      \n        $categoria=Categoria::findOrFail($id)->update($request->all());\n        return $request->all();\n    }\n")),(0,t.kt)("p",null,"Este c\xf3digo es una funci\xf3n PHP para actualizar una categor\xeda en una base de datos. La funci\xf3n toma dos par\xe1metros: un objeto Request y un id. El objeto ",(0,t.kt)("strong",{parentName:"p"},"Request")," se usa para acceder a los datos enviados al servidor en una solicitud HTTP, mientras que el id se usa para identificar la categor\xeda espec\xedfica que se debe actualizar."),(0,t.kt)("p",null,"El c\xf3digo comienza validando los datos recibidos en el objeto Request. Se utiliza la clase ",(0,t.kt)("strong",{parentName:"p"},"Validator")," para verificar si los campos nombre y ",(0,t.kt)("strong",{parentName:"p"},"descripcion")," est\xe1n presentes y cumplen con los requisitos especificados (por ejemplo, nombre debe ser \xfanico, tener una longitud m\xe1xima de 150 caracteres y no puede estar vac\xedo). Si la validaci\xf3n falla, la funci\xf3n devuelve una respuesta JSON con los mensajes de error de validaci\xf3n, junto con un c\xf3digo de estado ",(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("em",{parentName:"strong"},"HTTP de 422 (Entidad no procesable)")),"."),(0,t.kt)("p",null,"Si la validaci\xf3n es exitosa, el c\xf3digo encuentra la categor\xeda con el id dado usando el m\xe9todo findOrFail del modelo Categoria y la actualiza con los datos del objeto Request. Finalmente, los datos actualizados se devuelven en una respuesta JSON."),(0,t.kt)("p",null,"A continuaci\xf3n introduzca el siguiente c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Categoria  $categoria\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        Categoria::destroy($id);\n        return "Categoria $id eliminada.";\n    }\n}\n')),(0,t.kt)("p",null,"Este c\xf3digo es una funci\xf3n PHP para eliminar una categor\xeda de una base de datos. La funci\xf3n toma un solo par\xe1metro: ",(0,t.kt)("strong",{parentName:"p"},"id"),". Este id se utiliza para identificar la ",(0,t.kt)("strong",{parentName:"p"},"categor\xeda")," espec\xedfica que se debe eliminar."),(0,t.kt)("p",null,"El c\xf3digo llama al m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"destroy")," de la clase ",(0,t.kt)("strong",{parentName:"p"},"Categoria")," y pasa el ",(0,t.kt)("strong",{parentName:"p"},"id")," como par\xe1metro. Este m\xe9todo elimina la categor\xeda con el ",(0,t.kt)("strong",{parentName:"p"},"id")," dado de la base de datos. Finalmente, la funci\xf3n devuelve un mensaje indicando que la categor\xeda con ese ",(0,t.kt)("strong",{parentName:"p"},"id")," ha sido eliminada."),(0,t.kt)("h3",{id:"ivacontroller"},"\ud83d\udcc7IvaController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/CategoriaController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo IvaController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Iva;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\n\nclass IvaController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n\n\n    public function index()\n    {\n        //\n        return Iva::all();\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|unique:ivas|max:150',\n            'tanto_porciento' => 'required',\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        $iva=Iva::create($request->all());\n        return $iva;\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Iva  $iva\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n        return Iva::findOrFail($id);\n    \n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Iva  $iva\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|unique:ivas|max:150',\n            'tanto_porciento' => 'required',\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        $iva=Iva::findOrFail($id)->update($request->all());\n        return $request->all();\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Iva  $iva\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n        Iva::destroy($id);\n        return \"Iva $id eliminado.\";\n    }\n}\n")),(0,t.kt)("p",null,"Este c\xf3digo es un controlador de Laravel para manejar las operaciones ",(0,t.kt)("strong",{parentName:"p"},"*CRUD (crear, leer, actualizar y eliminar)")," para la tabla de impuestos sobre el valor agregado (IVA). La clase ",(0,t.kt)("strong",{parentName:"p"},"IvaController")," extiende la clase Controller y est\xe1 ubicada en el namespace ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1"),"."),(0,t.kt)("p",null,"El controlador tiene los siguientes m\xe9todos:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"index: Devuelve todas las entradas de la tabla IVA.")),(0,t.kt)("p",null,"store: Almacena una nueva entrada en la tabla IVA. Valida los datos de entrada utilizando el objeto Validator de Laravel y si la validaci\xf3n falla, devuelve un error en formato JSON. Si la validaci\xf3n es exitosa, la entrada se guarda en la tabla y se devuelve el objeto IVA creado."),(0,t.kt)("ol",{start:2},(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"show: Muestra una entrada espec\xedfica de la tabla IVA basada en su ID.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"update: Actualiza una entrada existente en la tabla IVA. Valida los datos de entrada utilizando el objeto Validator y si la validaci\xf3n falla, devuelve un error en formato JSON. Si la validaci\xf3n es exitosa, se actualiza la entrada y se devuelven todos los datos de la entrada actualizada.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"destroy: Elimina una entrada existente de la tabla IVA basada en su ID. Devuelve un mensaje indicando que la entrada con ese ID ha sido eliminada."))),(0,t.kt)("h3",{id:"marcacontroller"},"\ud83d\udcc7MarcaController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/MarcaController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo MarcaController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Marca;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass MarcaController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    \n    public function index()\n    {\n        //\n        return Marca::all();\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|unique:ivas|max:150'\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        Marca::create($request->all());\n        return $request->all();\n    \n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Marca  $marca\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n        return Marca::find($id);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Marca  $marca\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'nombre' => 'required|unique:ivas|max:150'\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        Marca::findOrFail($id)->update($request->all());\n        return $request->all();\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Marca  $marca\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n        Marca::destroy($id);\n        return \"Iva $id eliminado.\";\n    }\n}\n")),(0,t.kt)("p",null,"Este es un controlador de Laravel para manejar un recurso de ",(0,t.kt)("strong",{parentName:"p"},"marcas"),". La funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"index")," devuelve todas las marcas existentes, la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"store")," almacena una nueva marca en la base de datos, la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"show")," muestra una marca espec\xedfica con un ID dado, la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"update")," actualiza una marca existente con un ID dado y la funci\xf3n destroy elimina una marca con un ",(0,t.kt)("strong",{parentName:"p"},"ID")," dado."),(0,t.kt)("p",null,"Adem\xe1s, antes de almacenar o actualizar una marca, se realiza una validaci\xf3n para asegurarse de que se proporciona un nombre \xfanico y no vac\xedo con una longitud m\xe1xima de 150 caracteres. Si la validaci\xf3n falla, se devuelve un error en formato JSON con un c\xf3digo de estado HTTP 422."),(0,t.kt)("h3",{id:"ofertacontroller"},"\ud83d\udcc7OfertaController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/OfertaController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo OfertaController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"### \ud83d\udcc7MarcaController\nPara crear un controlador teclee el siguiente comando en su terminal:\n\n```bash\nphp artisan make:controller Api/V1/MarcaController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo MarcaController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Oferta;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\nuse \\DateTime;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass OfertaController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n\n    public function index()\n    {\n        //\n    \n        $ofertas=DB::select('SELECT * FROM v_ofertas');\n        // dd($productos);\n        // return Producto::all();\n         return $ofertas;\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'precio'=>'required',\n            'descripcion'=>'required',\n            'fecha_ini'=>'required|date_format:d-m-Y',\n            'fecha_fin'=>'required|date_format:d-m-Y',\n            'producto_id'=>'required'\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        \n        \n        $oferta=new Oferta();\n        $oferta->precio=$request->precio;\n        $oferta->descripcion=$request->descripcion;\n        $oferta->fecha_ini=DateTime::createFromFormat('d-m-Y',$request->fecha_ini)->format('d-m-y');\n        $oferta->fecha_fin=DateTime::createFromFormat('d-m-Y',$request->fecha_fin)->format('d-m-y');\n        $oferta->producto_id=$request->producto_id;\n        $oferta->save();\n        return $oferta;\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Oferta  $oferta\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n        return Oferta::find($id);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Oferta  $oferta\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request,$id)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'precio'=>'required',\n            'descripcion'=>'required',\n            'fecha_ini'=>'required|date_format:d-m-Y',\n            'fecha_fin'=>'required|date_format:d-m-Y',\n            'producto_id'=>'required'\n        ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        \n        $oferta=Oferta::find($id);\n        $oferta->precio=$request->precio;\n        $oferta->descripcion=$request->descripcion;\n        $oferta->fecha_ini=DateTime::createFromFormat('d-m-Y',$request->fecha_ini)->format('d-m-y');\n        $oferta->fecha_fin=DateTime::createFromFormat('d-m-Y',$request->fecha_fin)->format('d-m-y');\n        $oferta->producto_id=$request->producto_id;\n        $oferta->save();\n        return $oferta;\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Oferta  $oferta\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n        Oferta::destroy($id);\n        return \"Oferta $id eliminada.\";\n    }\n}\n")),(0,t.kt)("p",null,"Este c\xf3digo es un controlador de Laravel para la gesti\xf3n de ofertas. Tiene m\xe9todos para listar, crear, mostrar, actualizar y eliminar ofertas."),(0,t.kt)("p",null,"El m\xe9todo index recupera todas las ofertas a trav\xe9s de una consulta SQL utilizando el objeto DB de Laravel."),(0,t.kt)("p",null,"El m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"store")," valida los datos de la petici\xf3n y crea una nueva oferta en la base de datos."),(0,t.kt)("p",null,"El m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"show")," recupera una oferta espec\xedfica en base a su identificador."),(0,t.kt)("p",null,"El m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"update")," valida los datos de la petici\xf3n y actualiza la oferta correspondiente."),(0,t.kt)("p",null,"El m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},"destroy")," elimina la oferta correspondiente al identificador proporcionado."),(0,t.kt)("p",null,"Adem\xe1s, se ha aplicado un middleware de autenticaci\xf3n en la API para requerir autenticaci\xf3n en todas las solicitudes."),(0,t.kt)("h3",{id:"poblacioncontroller"},"\ud83d\udcc7PoblacionController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/PoblacionController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo MarcaController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("p",null,"De momento teclee el siguiente c\xf3digo"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Poblacion;\nuse Illuminate\\Http\\Request;\n\n\nclass PoblacionController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function __construct()\n    {\n        $this->middleware('auth:api');\n    }\n\n    public function index()\n    {\n        //\n        \n        return Poblacion::all()->skip(1000)->take(20);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Poblacion  $poblacion\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Poblacion $poblacion)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Poblacion  $poblacion\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Poblacion $poblacion)\n    {\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Poblacion  $poblacion\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Poblacion $poblacion)\n    {\n        //\n    }\n}\n")),(0,t.kt)("h3",{id:"productocontroller"},"\ud83d\udcc7ProductoController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/ProductoController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo ProductoController."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para crear el controlador:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"De momento teclee el siguiente c\xf3digo")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Producto;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass ProductoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function __construct()\n    {\n        $this->middleware('auth:api');\n    }\n    \n    public function index()\n    {\n        //\n        $productos=DB::select('SELECT * FROM v_productos');\n       // dd($productos);\n       // return Producto::all();\n        return $productos;\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n       \n        $validator = Validator::make($request->all(), [\n            'precio'=>'required',\n            'nombre'=>'required',\n            'descripcion'=>'required',\n            'subcategoria_id'=>'required',\n            'iva_id'=>'required',\n            'marce_id'=>'required']);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        Producto::create($request->all());\n        return $request->all();\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Producto  $producto\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n        return Producto::findOrFail($id);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Producto  $producto\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'precio'=>'required',\n            'nombre'=>'required',\n            'descripcion'=>'required',\n            'subcategoria_id'=>'required',\n            'iva_id'=>'required',\n            'marce_id'=>'required'       ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        Producto::findOrFail($id)->update($request->all());\n        return $request->all();\n\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Producto  $producto\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n        Producto::destroy($id);\n        return \"Producto $id eliminado.\";\n    }\n}\n")),(0,t.kt)("p",null,"El siguiente c\xf3digo es un controlador de Laravel para una aplicaci\xf3n web que maneja productos. Se encarga de realizar operaciones CRUD (crear, leer, actualizar y eliminar) en una base de datos de productos."),(0,t.kt)("p",null,"El controlador est\xe1 ubicado en la ruta App\\Http\\Controllers\\Api\\V1\\ProductoController y extiende la clase ",(0,t.kt)("strong",{parentName:"p"},"Controller")," de Laravel."),(0,t.kt)("p",null,"Las funciones disponibles son:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"index:")," Devuelve una lista de todos los productos en la base de datos.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"store:")," Almacena un nuevo producto en la base de datos. Valida los datos recibidos antes de almacenarlos.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"show:")," Devuelve un producto espec\xedfico seg\xfan su ID.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"update:")," Actualiza los datos de un producto espec\xedfico seg\xfan su ID. Valida los datos recibidos antes de actualizarlos.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"destroy:")," Elimina un producto espec\xedfico seg\xfan su ID."))),(0,t.kt)("p",null,"En resumen, este controlador es una parte importante de una aplicaci\xf3n de Laravel que maneja productos y permite a los usuarios realizar operaciones CRUD en la base de datos de productos."),(0,t.kt)("h3",{id:"productocontroller-1"},"\ud83d\udcc7ProductoController"),(0,t.kt)("p",null,"Para crear un controlador teclee el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:controller Api/V1/ProductoController\n")),(0,t.kt)("p",null,"Dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1")," y edite el archivo ",(0,t.kt)("strong",{parentName:"p"},"ProductoController.php"),"."),(0,t.kt)("p",null,"Seguidamente comentaremos paso a paso los para c"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App\\Http\\Controllers\\Api\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Producto;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass ProductoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function __construct()\n    {\n        $this->middleware('auth:api');\n    }\n    \n    public function index()\n    {\n        //\n        $productos=DB::select('SELECT * FROM v_productos');\n       // dd($productos);\n       // return Producto::all();\n        return $productos;\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n       \n        $validator = Validator::make($request->all(), [\n            'precio'=>'required',\n            'nombre'=>'required',\n            'descripcion'=>'required',\n            'subcategoria_id'=>'required',\n            'iva_id'=>'required',\n            'marce_id'=>'required']);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        Producto::create($request->all());\n        return $request->all();\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Producto  $producto\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n        return Producto::findOrFail($id);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Producto  $producto\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n        $validator = Validator::make($request->all(), [\n            'precio'=>'required',\n            'nombre'=>'required',\n            'descripcion'=>'required',\n            'subcategoria_id'=>'required',\n            'iva_id'=>'required',\n            'marce_id'=>'required'       ]);\n        if($validator->fails()){\n            return response()->json($validator->errors(),422); \n        }\n        Producto::findOrFail($id)->update($request->all());\n        return $request->all();\n\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Producto  $producto\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n        Producto::destroy($id);\n        return \"Producto $id eliminado.\";\n    }\n}\n")),(0,t.kt)("p",null,"El siguiente c\xf3digo es un controlador de Laravel para una aplicaci\xf3n web que maneja ",(0,t.kt)("strong",{parentName:"p"},"producto"),"s. Se encarga de realizar operaciones CRUD (crear, leer, actualizar y eliminar) en una base de datos de productos."),(0,t.kt)("p",null,"El controlador est\xe1 ubicado en la ruta ",(0,t.kt)("strong",{parentName:"p"},"App\\Http\\Controllers\\Api\\V1\\ProductoController")," y extiende la clase Controller de Laravel. "),(0,t.kt)("p",null,"Las funciones disponibles son:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"index"),": Devuelve una lista de todos los productos en la base de datos.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"store:")," Almacena un nuevo producto en la base de datos. Valida los datos recibidos antes de almacenarlos."))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"show:")," Devuelve un producto espec\xedfico seg\xfan su ID."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"update:"),"Actualiza los datos de un producto espec\xedfico seg\xfan su ID. Valida los datos recibidos antes de actualizarlos."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"destroy:")," Elimina un producto espec\xedfico seg\xfan su ID."),(0,t.kt)("p",null,"En resumen, este controlador es una parte importante de una aplicaci\xf3n de Laravel que maneja productos y permite a los usuarios realizar operaciones CRUD en la base de datos de productos."))}c.isMDXComponent=!0}}]);